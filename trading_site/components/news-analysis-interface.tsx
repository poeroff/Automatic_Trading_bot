"use client"

import { useState, useEffect } from 'react'
import { Search, TrendingUp, TrendingDown, BarChart3, Clock, ExternalLink, Bot, Newspaper, Star, AlertCircle } from 'lucide-react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"

interface Stock {
  symbol: string
  name: string
  market: string
}

interface NewsItem {
  title: string
  content?: string
  url?: string
  source?: string
  time?: string
  ai_analysis?: {
    sentiment: string
    confidence: number
    summary?: string
    investment_advice?: string
    price_impact?: string
  }
}

interface AnalysisResult {
  stock_name: string
  stock_code: string
  articles: NewsItem[]
  gemini_analysis?: {
    overall_sentiment: string
    average_sentiment_score: number
    total_articles: number
    summary: string
    recommendation: string
  }
  crawled_at: string
}

export function NewsAnalysisInterface() {
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedStock, setSelectedStock] = useState<Stock | null>(null)
  const [newsData, setNewsData] = useState<NewsItem[]>([])
  const [selectedNews, setSelectedNews] = useState<NewsItem | null>(null)
  const [loading, setLoading] = useState(false)
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null)
  const [majorStocks, setMajorStocks] = useState<Stock[]>([])
  const [error, setError] = useState<string | null>(null)
  const [apiStatus, setApiStatus] = useState<'connecting' | 'connected' | 'error'>('connecting')

  // Ï£ºÏöî Ï¢ÖÎ™© Î°úÎìú
  useEffect(() => {
    fetchMajorStocks()
  }, [])

  const fetchMajorStocks = async () => {
    try {
      console.log('üîó Î∞±ÏóîÎìú API Ïó∞Í≤∞ ÏãúÎèÑ...')
      setApiStatus('connecting')
      
      const response = await fetch('http://localhost:8000/news/stocks/major')
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }
      
      const data = await response.json()
      console.log('‚úÖ Ï£ºÏöî Ï¢ÖÎ™© Îç∞Ïù¥ÌÑ∞:', data)
      
      setMajorStocks(data.data || [])
      setApiStatus('connected')
      setError(null)
      
    } catch (error) {
      console.error('‚ùå Î∞±ÏóîÎìú Ïó∞Í≤∞ Ïã§Ìå®:', error)
      setApiStatus('error')
      setError(`Î∞±ÏóîÎìú ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®: ${error}`)
      
      // Î∞±ÏóîÎìú Ïó∞Í≤∞ Ïã§Ìå® Ïãú Í∏∞Î≥∏ Ï¢ÖÎ™© Î¶¨Ïä§Ìä∏ Ï†úÍ≥µ
      setMajorStocks([
        { symbol: '005930', name: 'ÏÇºÏÑ±Ï†ÑÏûê', market: 'KOSPI' },
        { symbol: '000660', name: 'SKÌïòÏù¥ÎãâÏä§', market: 'KOSPI' },
        { symbol: '035420', name: 'NAVER', market: 'KOSPI' },
        { symbol: '005380', name: 'ÌòÑÎåÄÏ∞®', market: 'KOSPI' },
        { symbol: '035720', name: 'Ïπ¥Ïπ¥Ïò§', market: 'KOSPI' },
        { symbol: '051910', name: 'LGÌôîÌïô', market: 'KOSPI' },
        { symbol: '373220', name: 'LGÏóêÎÑàÏßÄÏÜîÎ£®ÏÖò', market: 'KOSPI' },
        { symbol: '207940', name: 'ÏÇºÏÑ±Î∞îÏù¥Ïò§Î°úÏßÅÏä§', market: 'KOSPI' }
      ])
    }
  }

  // Ï¢ÖÎ™© Í≤ÄÏÉâ Ï≤òÎ¶¨
  const handleStockSearch = async (stockCode: string, stockName: string) => {
    console.log(`üîç Ï¢ÖÎ™© ÏÑ†ÌÉù: ${stockName} (${stockCode})`)
    
    setLoading(true)
    setSelectedStock({ symbol: stockCode, name: stockName, market: 'KOSPI' })
    setAnalysisResult(null)
    setNewsData([])
    setError(null)
    
    try {
      console.log('üì∞ Îâ¥Ïä§ ÌÅ¨Î°§ÎßÅ API Ìò∏Ï∂ú Ï§ë...')
      
      // Î∞±ÏóîÎìú Îâ¥Ïä§ ÌÅ¨Î°§ÎßÅ Î∞è Î∂ÑÏÑù API Ìò∏Ï∂ú
      const response = await fetch(`http://localhost:8000/news/crawl-and-analyze/?ticker=${stockCode}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      
      console.log('üì° API ÏùëÎãµ ÏÉÅÌÉú:', response.status, response.statusText)
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }
      
      const result = await response.json()
      console.log('üìä Îâ¥Ïä§ Î∂ÑÏÑù Í≤∞Í≥º:', result)
      
      if (result.success && result.data) {
        // Îâ¥Ïä§ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
        const articles = result.data.articles || []
        setNewsData(articles)
        
        console.log(`‚úÖ ${stockName} Îâ¥Ïä§ ${articles.length}Í∞ú Î°úÎìúÎê®`)
        
        // Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä ÏûàÏúºÎ©¥ ÏÑ§Ï†ï
        if (result.data.ai_analysis_summary) {
          setAnalysisResult({
            stock_name: stockName,
            stock_code: stockCode,
            articles: articles,
            gemini_analysis: {
              overall_sentiment: result.data.ai_analysis_summary.overall_sentiment || 'Î∂ÑÏÑù Ï§ë',
              average_sentiment_score: 0.7,
              total_articles: result.data.crawled_articles || articles.length,
              summary: result.data.ai_analysis_summary.market_outlook || 'Îâ¥Ïä§ Î∂ÑÏÑùÏùÑ ÏßÑÌñâÌïòÍ≥† ÏûàÏäµÎãàÎã§.',
              recommendation: result.data.ai_analysis_summary.investment_recommendation || 'Î∂ÑÏÑù Ï§ë'
            },
            crawled_at: result.data.crawled_at || new Date().toISOString()
          })
          console.log('ü§ñ AI Î∂ÑÏÑù Í≤∞Í≥º ÏÑ§Ï†ï ÏôÑÎ£å')
        }
        
      } else {
        console.error('‚ùå Îâ¥Ïä§ Î∂ÑÏÑù Ïã§Ìå®:', result.error || result.message)
        setError(`Îâ¥Ïä§ Î∂ÑÏÑù Ïã§Ìå®: ${result.error || result.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`)
        
        // Ïã§Ìå® ÏãúÏóêÎèÑ ÏÉòÌîå Îâ¥Ïä§ ÌëúÏãú
        const sampleNews = createSampleNews(stockName)
        setNewsData(sampleNews)
      }
    } catch (error) {
      console.error('üö® API ÏöîÏ≤≠ Ïã§Ìå®:', error)
      setError(`API ÏöîÏ≤≠ Ïã§Ìå®: ${error}`)
      
      // ÏóêÎü¨ ÏãúÏóêÎèÑ ÏÉòÌîå Îâ¥Ïä§ ÌëúÏãú
      const sampleNews = createSampleNews(stockName)
      setNewsData(sampleNews)
    } finally {
      setLoading(false)
    }
  }

  // ÏÉòÌîå Îâ¥Ïä§ ÏÉùÏÑ± Ìï®Ïàò
  const createSampleNews = (stockName: string): NewsItem[] => {
    return [
      {
        title: `${stockName} Ï£ºÍ∞Ä ÏÉÅÏäπÏÑ∏ ÏßÄÏÜç, Ìà¨ÏûêÏûêÎì§ Í¥ÄÏã¨ ÏßëÏ§ë`,
        content: `${stockName}Í∞Ä ÏµúÍ∑º Í∏çÏ†ïÏ†ÅÏù∏ Ïã§Ï†Å Ï†ÑÎßùÏúºÎ°ú Ï£ºÍ∞Ä ÏÉÅÏäπÏÑ∏Î•º Î≥¥Ïù¥Í≥† ÏûàÎã§.`,
        source: 'ÏÉòÌîåÎâ¥Ïä§',
        time: '1ÏãúÍ∞Ñ Ï†Ñ',
        ai_analysis: {
          sentiment: 'Í∏çÏ†ï',
          confidence: 0.85,
          summary: 'Í∏çÏ†ïÏ†ÅÏù∏ Ïã§Ï†Å Ï†ÑÎßùÏúºÎ°ú Ìà¨ÏûêÏã¨Î¶¨ Í∞úÏÑ†',
          investment_advice: 'Îß§Ïàò Í≤ÄÌÜ†',
          price_impact: 'ÏÉÅÏäπ ÏòàÏÉÅ'
        }
      },
      {
        title: `${stockName} Ïã†Í∏∞Ïà† Î∞úÌëúÎ°ú ÎØ∏Îûò ÏÑ±Ïû• ÎèôÎ†• ÌôïÎ≥¥`,
        content: `${stockName}Í∞Ä Ï∞®ÏÑ∏ÎåÄ Í∏∞Ïà† Í∞úÎ∞úÏóê ÏÑ±Í≥µÌïòÎ©∞ Ïû•Í∏∞ ÏÑ±Ïû• Í∞ÄÎä•ÏÑ±ÏùÑ ÎÜíÏòÄÎã§.`,
        source: 'ÏÉòÌîåÎâ¥Ïä§',
        time: '3ÏãúÍ∞Ñ Ï†Ñ',
        ai_analysis: {
          sentiment: 'Îß§Ïö∞Í∏çÏ†ï',
          confidence: 0.92,
          summary: 'Ïã†Í∏∞Ïà† Í∞úÎ∞úÎ°ú Ïû•Í∏∞ ÏÑ±Ïû• Ï†ÑÎßù Î∞ùÏùå',
          investment_advice: 'Ï†ÅÍ∑π Îß§Ïàò',
          price_impact: 'Í∏âÎì± ÏòàÏÉÅ'
        }
      },
      {
        title: `${stockName} Ïã§Ï†Å Î∞úÌëú ÏïûÎëêÍ≥† ÏãúÏû• Í∏∞ÎåÄÍ∞ê Ï¶ùÍ∞Ä`,
        content: `${stockName}Ïùò Îã§Ïùå Î∂ÑÍ∏∞ Ïã§Ï†Å Î∞úÌëúÎ•º ÏïûÎëêÍ≥† ÏãúÏû•Ïùò Í∏∞ÎåÄÍ∞êÏù¥ ÎÜíÏïÑÏßÄÍ≥† ÏûàÎã§.`,
        source: 'ÏÉòÌîåÎâ¥Ïä§',
        time: '5ÏãúÍ∞Ñ Ï†Ñ',
        ai_analysis: {
          sentiment: 'Ï§ëÎ¶Ω',
          confidence: 0.70,
          summary: 'Ïã§Ï†Å Î∞úÌëú ÎåÄÍ∏∞Î°ú Í¥ÄÎßùÏÑ∏ ÏßÄÏÜç',
          investment_advice: 'Í¥ÄÎßù',
          price_impact: 'Ï§ëÎ¶Ω'
        }
      }
    ]
  }

  // Í∞úÎ≥Ñ Îâ¥Ïä§ AI Î∂ÑÏÑù
  const analyzeNews = async (newsItem: NewsItem) => {
    if (!selectedStock) return
    
    console.log(`ü§ñ Îâ¥Ïä§ AI Î∂ÑÏÑù ÏãúÏûë: ${newsItem.title.substring(0, 30)}...`)
    
    setSelectedNews(newsItem)
    setLoading(true)
    
    try {
      // Gemini AI Î∂ÑÏÑù API Ìò∏Ï∂ú
      const response = await fetch(`http://localhost:8000/news/gemini-analyze/${selectedStock.symbol}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }
      
      const result = await response.json()
      console.log('üéØ Gemini Î∂ÑÏÑù Í≤∞Í≥º:', result)
      
      if (result.success && result.data) {
        setAnalysisResult(result.data)
        console.log('‚úÖ Gemini AI Î∂ÑÏÑù ÏôÑÎ£å')
      } else {
        console.error('‚ùå Gemini Î∂ÑÏÑù Ïã§Ìå®:', result.error)
        
        // Î∂ÑÏÑù Ïã§Ìå® Ïãú Í∏∞Î≥∏ Í≤∞Í≥º ÏÑ§Ï†ï
        setAnalysisResult({
          stock_name: selectedStock.name,
          stock_code: selectedStock.symbol,
          articles: newsData,
          gemini_analysis: {
            overall_sentiment: 'Î∂ÑÏÑù Ïã§Ìå®',
            average_sentiment_score: 0,
            total_articles: newsData.length,
            summary: 'AI Î∂ÑÏÑùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÎÇòÏ§ëÏóê Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.',
            recommendation: 'ÏàòÎèô Î∂ÑÏÑù ÌïÑÏöî'
          },
          crawled_at: new Date().toISOString()
        })
      }
    } catch (error) {
      console.error('üö® Gemini Î∂ÑÏÑù Ïã§Ìå®:', error)
      setError(`AI Î∂ÑÏÑù Ïã§Ìå®: ${error}`)
    } finally {
      setLoading(false)
    }
  }

  // ÌïÑÌÑ∞Îêú Ï¢ÖÎ™© Î¶¨Ïä§Ìä∏
  const filteredStocks = majorStocks.filter(stock => 
    stock.name.includes(searchTerm) || stock.symbol.includes(searchTerm)
  )

  const getSentimentColor = (sentiment: string) => {
    const sentimentMap: { [key: string]: string } = {
      'Îß§Ïö∞Í∏çÏ†ï': 'text-blue-600',
      'Í∏çÏ†ï': 'text-green-600', 
      'Ï§ëÎ¶Ω': 'text-gray-600',
      'Î∂ÄÏ†ï': 'text-red-600',
      'Îß§Ïö∞Î∂ÄÏ†ï': 'text-red-800'
    }
    return sentimentMap[sentiment] || 'text-gray-600'
  }

  const getSentimentIcon = (sentiment: string) => {
    if (sentiment?.includes('Í∏çÏ†ï')) return <TrendingUp className="w-4 h-4" />
    if (sentiment?.includes('Î∂ÄÏ†ï')) return <TrendingDown className="w-4 h-4" />
    return <BarChart3 className="w-4 h-4" />
  }

  return (
    <div className="container mx-auto px-4 py-8">
      
      {/* Ìó§Îçî */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold tracking-tighter md:text-4xl mb-2">üì∞ AI Îâ¥Ïä§ Î∂ÑÏÑù</h1>
        <p className="text-muted-foreground md:text-xl">Ï¢ÖÎ™©ÏùÑ Í≤ÄÏÉâÌïòÏó¨ Í¥ÄÎ†® Îâ¥Ïä§ÏôÄ AI Î∂ÑÏÑù Í≤∞Í≥ºÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî</p>
        
        {/* API ÏÉÅÌÉú ÌëúÏãú */}
        <div className="mt-4">
          {apiStatus === 'connecting' && (
            <Badge variant="outline" className="text-yellow-600">
              üîó Î∞±ÏóîÎìú Ïó∞Í≤∞ Ï§ë...
            </Badge>
          )}
          {apiStatus === 'connected' && (
            <Badge variant="outline" className="text-green-600">
              ‚úÖ Î∞±ÏóîÎìú Ïó∞Í≤∞Îê®
            </Badge>
          )}
          {apiStatus === 'error' && (
            <Badge variant="outline" className="text-red-600">
              ‚ùå Î∞±ÏóîÎìú Ïó∞Í≤∞ Ïã§Ìå® (ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©Ï§ë)
            </Badge>
          )}
        </div>
      </div>

      {/* ÏóêÎü¨ Î©îÏãúÏßÄ - Alert ÎåÄÏã† Card ÏÇ¨Ïö© */}
      {error && (
        <Card className="mb-6 border-red-200 bg-red-50">
          <CardContent className="p-4">
            <div className="flex items-center gap-2 text-red-600">
              <AlertCircle className="h-4 w-4" />
              <span className="text-sm">{error}</span>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Í≤ÄÏÉâ ÏÑπÏÖò */}
      <Card className="mb-6">
        <CardContent className="p-6">
          <div className="flex items-center gap-4 mb-4">
            <Search className="w-5 h-5 text-muted-foreground" />
            <Input
              placeholder="Ï¢ÖÎ™©Î™Ö ÎòêÎäî ÏΩîÎìúÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: ÏÇºÏÑ±Ï†ÑÏûê, 005930)"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="flex-1"
            />
          </div>

          {/* Í≤ÄÏÉâ Í≤∞Í≥º */}
          {searchTerm && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 max-h-48 overflow-y-auto">
              {filteredStocks.map((stock) => (
                <Button
                  key={stock.symbol}
                  variant="outline"
                  onClick={() => handleStockSearch(stock.symbol, stock.name)}
                  className="p-3 h-auto text-left justify-start"
                >
                  <div>
                    <div className="font-medium">{stock.name}</div>
                    <div className="text-sm text-muted-foreground">{stock.symbol} ¬∑ {stock.market}</div>
                  </div>
                </Button>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        
        {/* Ï¢ÖÎ™© Ï†ïÎ≥¥ & Îâ¥Ïä§ Î¶¨Ïä§Ìä∏ */}
        <div className="lg:col-span-2 space-y-6">
          
          {/* ÏÑ†ÌÉùÎêú Ï¢ÖÎ™© Ï†ïÎ≥¥ */}
          {selectedStock && (
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="text-2xl">{selectedStock.name}</CardTitle>
                    <CardDescription>{selectedStock.symbol}</CardDescription>
                  </div>
                  <Star className="w-6 h-6 text-yellow-500" />
                </div>
                
                {loading && (
                  <div className="flex items-center gap-2 text-blue-600">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                    <span>Îâ¥Ïä§Î•º Î∂ÑÏÑùÌïòÍ≥† ÏûàÏäµÎãàÎã§...</span>
                  </div>
                )}
              </CardHeader>
            </Card>
          )}

          {/* Îâ¥Ïä§ Î¶¨Ïä§Ìä∏ */}
          {newsData.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Newspaper className="w-5 h-5 text-blue-600" />
                  Í¥ÄÎ†® Îâ¥Ïä§ ({newsData.length})
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {newsData.map((news, index) => (
                    <Card 
                      key={index}
                      className="cursor-pointer hover:bg-muted/50 transition-colors border-l-4 border-l-blue-500"
                      onClick={() => analyzeNews(news)}
                    >
                      <CardContent className="p-4">
                        <div className="flex items-start justify-between gap-4">
                          <div className="flex-1">
                            <h4 className="font-medium mb-2 line-clamp-2 text-lg">
                              {news.title}
                            </h4>
                            
                            {news.ai_analysis && (
                              <div className="flex items-center gap-2 mb-2">
                                {getSentimentIcon(news.ai_analysis.sentiment)}
                                <Badge variant="outline" className={getSentimentColor(news.ai_analysis.sentiment)}>
                                  {news.ai_analysis.sentiment} ({Math.round(news.ai_analysis.confidence * 100)}%)
                                </Badge>
                                <Badge variant="outline">
                                  {news.ai_analysis.investment_advice}
                                </Badge>
                              </div>
                            )}
                            
                            <p className="text-sm text-muted-foreground mb-3 line-clamp-3">
                              {news.ai_analysis?.summary || news.content || "ÌÅ¥Î¶≠ÌïòÏó¨ AI Î∂ÑÏÑù Í≤∞Í≥ºÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî"}
                            </p>
                            
                            <div className="flex items-center gap-4 text-xs text-muted-foreground">
                              <span>{news.source || "Îâ¥Ïä§ ÏÜåÏä§"}</span>
                              <div className="flex items-center gap-1">
                                <Clock className="w-3 h-3" />
                                <span>{news.time || "Î∞©Í∏à Ï†Ñ"}</span>
                              </div>
                            </div>
                          </div>
                          
                          <div className="flex items-center gap-2">
                            <Bot className="w-5 h-5 text-blue-600" />
                            <ExternalLink className="w-4 h-4 text-gray-400" />
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Îâ¥Ïä§ ÏóÜÏùÑ Îïå ÏïàÎÇ¥ */}
          {selectedStock && newsData.length === 0 && !loading && (
            <Card>
              <CardContent className="p-8 text-center">
                <Newspaper className="w-12 h-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-medium mb-2">Îâ¥Ïä§Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§</h3>
                <p className="text-muted-foreground">
                  {selectedStock.name} Í¥ÄÎ†® Îâ¥Ïä§Î•º ÏàòÏßëÌïòÍ≥† ÏûàÏäµÎãàÎã§. Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî.
                </p>
              </CardContent>
            </Card>
          )}
        </div>

        {/* AI Î∂ÑÏÑù Í≤∞Í≥º Ìå®ÎÑê */}
        <div className="space-y-6">
          
          {/* AI Î∂ÑÏÑù Ïπ¥Îìú */}
          {analysisResult && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Bot className="w-5 h-5 text-blue-600" />
                  ü§ñ AI Î∂ÑÏÑù Í≤∞Í≥º
                </CardTitle>
              </CardHeader>
              <CardContent>
                {/* Ï†ÑÏ≤¥ Í∞êÏ†ï Î∂ÑÏÑù */}
                <div className="mb-6 p-4 bg-muted rounded-lg">
                  <div className="text-center">
                    <div className="text-2xl font-bold mb-1">
                      {analysisResult.gemini_analysis?.overall_sentiment || "Î∂ÑÏÑù Ï§ë"}
                    </div>
                    <div className="text-sm text-muted-foreground">
                      Î∂ÑÏÑùÎêú Îâ¥Ïä§: {analysisResult.gemini_analysis?.total_articles || 0}Í∞ú
                    </div>
                  </div>
                </div>

                {/* Ìà¨Ïûê Ï∂îÏ≤ú */}
                <div className="mb-6">
                  <h4 className="font-medium mb-2">üìà Ìà¨Ïûê Ï∂îÏ≤ú</h4>
                  <div className="p-3 bg-blue-50 rounded-lg">
                    <span className="text-blue-800 font-medium">
                      {analysisResult.gemini_analysis?.recommendation || "Î∂ÑÏÑù Ï§ë"}
                    </span>
                  </div>
                </div>

                {/* Ï¢ÖÌï© ÏöîÏïΩ */}
                <div className="mb-6">
                  <h4 className="font-medium mb-2">üìã Ï¢ÖÌï© ÏöîÏïΩ</h4>
                  <p className="text-sm leading-relaxed">
                    {analysisResult.gemini_analysis?.summary || "AIÍ∞Ä Îâ¥Ïä§Î•º Î∂ÑÏÑùÌïòÍ≥† ÏûàÏäµÎãàÎã§..."}
                  </p>
                </div>

                {/* Î∂ÑÏÑù ÌÜµÍ≥Ñ */}
                <div className="text-xs text-muted-foreground border-t pt-4">
                  <div className="flex justify-between items-center">
                    <span>Google Gemini Pro</span>
                  </div>
                  <div className="mt-1">
                    Î∂ÑÏÑù ÏãúÍ∞Ñ: {analysisResult.crawled_at ? new Date(analysisResult.crawled_at).toLocaleTimeString() : 'Î∞©Í∏à Ï†Ñ'}
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* ÏÇ¨Ïö©Î≤ï ÏïàÎÇ¥ */}
          {!selectedStock && (
            <Card>
              <CardHeader>
                <CardTitle>üîç ÏÇ¨Ïö© Î∞©Î≤ï</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2 text-sm">
                  <div>1. ÏÉÅÎã®ÏóêÏÑú Í¥ÄÏã¨ Ï¢ÖÎ™©ÏùÑ Í≤ÄÏÉâÌïòÏÑ∏Ïöî</div>
                  <div>2. Ï¢ÖÎ™©ÏùÑ ÏÑ†ÌÉùÌïòÎ©¥ Í¥ÄÎ†® Îâ¥Ïä§Í∞Ä Î°úÎìúÎê©ÎãàÎã§</div>
                  <div>3. Îâ¥Ïä§Î•º ÌÅ¥Î¶≠ÌïòÎ©¥ AIÍ∞Ä Ìò∏Ïû¨/ÏïÖÏû¨Î•º Î∂ÑÏÑùÌï©ÎãàÎã§</div>
                  <div>4. Ïö∞Ï∏°ÏóêÏÑú ÏÉÅÏÑ∏ Î∂ÑÏÑù Í≤∞Í≥ºÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî</div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Ïù∏Í∏∞ Ï¢ÖÎ™© */}
          <Card>
            <CardHeader>
              <CardTitle>üî• Ïù∏Í∏∞ Ï¢ÖÎ™©</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {['005930', '000660', '035420', '005380', '035720'].map((code) => {
                  const stock = majorStocks.find(s => s.symbol === code)
                  if (!stock) return null
                  
                  return (
                    <Button
                      key={code}
                      variant="ghost"
                      onClick={() => handleStockSearch(stock.symbol, stock.name)}
                      className="w-full justify-start p-3 h-auto"
                    >
                      <div className="text-left">
                        <div className="font-medium">{stock.name}</div>
                        <div className="text-sm text-muted-foreground">{stock.symbol}</div>
                      </div>
                    </Button>
                  )
                })}
              </div>
            </CardContent>
          </Card>

        </div>
      </div>
    </div>
  )
}