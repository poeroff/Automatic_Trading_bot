

services:


  trading-server:
    container_name: trading-server
    build:
      context: ./Server/trading-server
      dockerfile: Dockerfile
    ports:
      - 4000:4000
      - 81:81      # WebSocket용 (Gateway)
    volumes:
      - ./Server/trading-server:/trading-server
      - /trading-server/node_modules
    env_file:
      - ./Server/trading-server/.env
    environment:
      - CHOKIDAR_USEPOLLING=true
    stdin_open: true  # -i
    tty: true  
    
    depends_on:
      mysql:
         condition: service_healthy
      redis:
        condition: service_started
  updateserver:
    container_name: updateserver
    build:
      context: ./Server/updateserver
      dockerfile: Dockerfile
    ports:
      - 4001:4001
    volumes:
      - ./Server/updateserver:/updateserver
      - /updateserver/node_modules
      
    env_file:
      - ./Server/updateserver/.env
    environment:
      - CHOKIDAR_USEPOLLING=true
    stdin_open: true  # -i
    tty: true
    depends_on:
      redis:
        condition: service_started
      mysql:
        condition: service_started
  fastapi-server:
    container_name: fastapi-server
    build:
      context: ./fastapi-server  # FastAPI 프로젝트 디렉토리
      dockerfile: Dockerfile
    ports:
      - "8000:8000"  # FastAPI 기본 포트
    volumes:
      - ./fastapi-server:/app  # FastAPI 코드 마운트
    env_file:
      - ./fastapi-server/.env
    environment:
      - TZ=Asia/Seoul  # 시간대 설정
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped  # 컨테이너가 실패 시 재시작

  redis:
    container_name: redis
    image: redis:7-alpine
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  mysql:
    image: mysql:8.3
    container_name: mysql
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 20s
      retries: 10
    environment:
      MYSQL_ROOT_PASSWORD: wqdsdsf123!
      MYSQL_USER: admin          
      MYSQL_PASSWORD: wqdsdsf123!
      MYSQL_DATABASE: stock
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d

volumes:
  redis-data:
  mysql-data:
  # mysql-data:
